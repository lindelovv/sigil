#version 450
layout( local_size_x = 16, local_size_y = 16 ) in;
layout( rgba8, set = 0, binding = 0 ) uniform image2D img;

layout( push_constant ) uniform constants {
    vec4 data1;
    vec4 data2;
    vec4 data3;
    vec4 data4;
} push_const;

float noise_2d(in vec2 x) {
    float xhash = cos(x.x * 37.0);
    float yhash = cos(x.y * 37.0);
    return fract( 415.92653 * (xhash + yhash));
}

float noisy_star_field(in vec2 sample_pos, float threshold) {
    float star_val = noise_2d(sample_pos);
    if( star_val >= threshold ) {
        star_val = pow((star_val - threshold)/(1.0 - threshold), 6.0);
    }
    else {
        star_val = 0.0;
    }
    return star_val;
}

float stable_star_field(in vec2 sample_pos, float threshold) {
    float fractX = fract(sample_pos.x);
    float fractY = fract(sample_pos.y);
    vec2 floor_sample = floor(sample_pos);
    float v1 = noisy_star_field(floor_sample, threshold);
    float v2 = noisy_star_field(floor_sample + vec2(0, 1), threshold);
    float v3 = noisy_star_field(floor_sample + vec2(1, 0), threshold);
    float v4 = noisy_star_field(floor_sample + vec2(1, 1), threshold);
    return v1 * (1 - fractX)  * (1 - fractY)
        + v2 * (1 - fractX) * fractY
        + v3 * fractX * (1 - fractY)
        + v4 * fractX * fractY;
}

void main_image(out vec4 frag_color, in vec2 frag_coord) {
    vec2 res = imageSize(img);
    vec3 color = push_const.data1.xyz * frag_coord.y / res.y;
    float starfield_threshold = push_const.data1.w;
    float x_rate = .2;
    float y_rate = -.6;
    vec2 sample_pos = frag_coord.xy + vec2(x_rate * float(1), y_rate * float(1));
    float star_val = stable_star_field(sample_pos, starfield_threshold);
    color += vec3(star_val);
    frag_color = vec4(color, 1.0);
}

void main() {
    vec4 val = vec4(0, 0, 0, 1);
    ivec2 texel_coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(img);
    if(texel_coord.x < size.x && texel_coord.y < size.y) {
        vec4 color;
        main_image(color, texel_coord);
        imageStore(img, texel_coord, color);
    }
}

